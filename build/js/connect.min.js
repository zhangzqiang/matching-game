(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["connect"] = factory();
	else
		root["connect"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Util = function () { }


Util.prototype.getRandomArray = function (count) {
    var array = [];
    while (array.length < count) {
        var random = Math.floor(Math.random() * count) + 1;
        if (array.indexOf(random) < 0) {
            array.push(random);
        }
    }
    return array;
}


/**
 * 获取随机字符串
 * @param {*长度} n 
 */
Util.prototype.generateMixed = function (n) {
    var res = "";
    var chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
    for (var i = 0; i < n; i++) {
        var id = Math.ceil(Math.random() * 35);
        res += chars[id];
    }
    return res;
}

Util.prototype.getRequest = function () {
    var url = decodeURI(location.search);
    var theRequest = new Object();
    if (url.indexOf("?") != -1) {
        var str = url.substr(1);
        var strs = str.split("&");
        for (var i = 0; i < strs.length; i++) {
            theRequest[strs[i].split("=")[0]] = unescape(strs[i].split("=")[1]);
        }
    }
    return theRequest;
}

Util.prototype.initContent = function (count) {
    var left = [];
    var right = [];

    var data = this.getRandomArray(count);
    for (var i = 0; i < count; i++) {
        right[i] = {};
    }

    data.forEach(function (item, index) {
        left.push({
            c: "<img src='./image/left/" + (index + 1) + ".jpg' alt=''/>",
            aw: item - 1
        });
        right[item - 1] = {
            c: "<img src='./image/right/" + (index + 1) + ".jpg' alt=''/>"
        }
    });

    return {
        left: left,
        right: right
    }
}

//格式化参数     
Util.prototype.formatParams = function (data) {
    var arr = [];
    for (var name in data) {
        //encodeURIComponent用于对 URI 中的某一部分进行编码  
        arr.push(encodeURIComponent(name) + '=' + encodeURIComponent(data[name]));
    };
    // 添加一个随机数参数，防止缓存     
    arr.push('v=' + Math.floor(Math.random() * 10000 + 500));
    return arr.join('&');
}

module.exports = new Util();

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



const util = __webpack_require__(0);

function ajax(params) {

    params = params || {};
    params.data = params.data || {};

    // 判断是ajax请求还是jsonp请求  
    var json = params.jsonp ? jsonp(params) : json(params);

    // ajax请求     
    function json(params) {
        //  请求方式，默认是GET  
        params.type = (params.type || 'GET').toUpperCase();
        // 避免有特殊字符，必须格式化传输数据    
        params.data = util.formatParams(params.data);
        var xhr = null;
        // 实例化XMLHttpRequest对象     
        if (window.XMLHttpRequest) {
            xhr = new XMLHttpRequest();
        } else {
            // IE6及其以下版本     
            xhr = new ActiveXObjcet('Microsoft.XMLHTTP');
        };

        // 监听事件，只要 readyState 的值变化，就会调用 readystatechange 事件   
        xhr.onreadystatechange = function () {
            //  readyState属性表示请求/响应过程的当前活动阶段，4为完成，已经接收到全部响应数据  
            if (xhr.readyState == 4) {
                var status = xhr.status;
                //  status：响应的HTTP状态码，以2开头的都是成功  
                if (status >= 200 && status < 300) {
                    var response = '';
                    // 判断接受数据的内容类型    
                    var type = xhr.getResponseHeader('Content-type');
                    if (type.indexOf('xml') !== -1 && xhr.responseXML) {
                        response = xhr.responseXML; //Document对象响应     
                    } else if (type === 'application/json') {
                        response = JSON.parse(xhr.responseText); //JSON响应     
                    } else {
                        response = xhr.responseText; //字符串响应     
                    };
                    // 成功回调函数   
                    params.success && params.success(response);
                } else {
                    params.error && params.error(status);
                }
            };
        };

        // 连接和传输数据     
        if (params.type == 'GET') {
            // 三个参数：请求方式、请求地址(get方式时，传输数据是加在地址后的)、是否异步请求(同步请求的情况极少)；  
            xhr.open(params.type, params.url + '?' + params.data, true);
            xhr.send(null);
        } else {
            xhr.open(params.type, params.url, true);
            //必须，设置提交时的内容类型     
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
            // 传输数据    
            xhr.send(params.data);
        }
    }

    // jsonp请求      
    function jsonp(params) {
        //创建script标签并加入到页面中      
        var callbackName = params.jsonp;
        var head = document.getElementsByTagName('head')[0];
        // 设置传递给后台的回调参数名      
        params.data['callback'] = callbackName;
        var data = util.formatParams(params.data);
        var script = document.createElement('script');
        head.appendChild(script);

        //创建jsonp回调函数      
        window[callbackName] = function (redata) {
            head.removeChild(script);
            clearTimeout(script.timer);
            window[callbackName] = null;
            params.success && params.success(redata);
        };

        //发送请求       
        script.src = params.url + '?' + data;
        //为了得知此次请求是否成功，设置超时处理      
        if (params.time) {
            script.timer = setTimeout(function () {
                window[callbackName] = null;
                head.removeChild(script);
                params.error && params.error({
                    message: '超时'
                });
            }, params.time);
        }
    };
}

module.exports = ajax;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by ZhaoBoWen on 2016/11/14.
 */



var addContent = __webpack_require__(4);
var removeElement = __webpack_require__(5);

var STATE_INITAL = 0;//初始化状态
// var STATE_SELECTED = 1;//选中状态  暂时抛弃,由class == ac判断
var STATE_CONNECTION = 2;//连线状态

// 记录用户所连线答案
var questionArr;

var winWidth = parseInt(window.getComputedStyle(document.body, null).width);
// 显示轮廓
var packDivWidth = winWidth * 0.3;
var packDivHeight = winWidth * 0.22;
var packDivGapBottom = 30;
/**
 * 连线题类
 * @constructor
 */
function ConnectDiv() {

    // 获取连线区域节点
    this.connectDiv = document.getElementById('connect');
}

/**
 * 初始化
 * @param record 用户作答记录
 * @param dataList 展示数据
 * @param type 是否批卷
 */
ConnectDiv.prototype.init = function (record, dataList, type) {

    // APP可能会重复利用,清空节点
    this.connectDiv.innerHTML = "";

    // APP可能会重复利用,清空答案
    questionArr = [];

    // 用户是否之前作答
    this.userAnswerArr = record ? record : [];

    // 是否批卷,
    this.type = type;

    var me = this;

    // 记录需要的属性
    // 绑定点击事件
    for (var list = 0; list < 2; list++) {
        var questionList = [];
        for (var row = 0, len = dataList.right.length > dataList.left.length ? dataList.right.length : dataList.left.length; row < len; row++) {

            // 如果空数据的时候重新循环
            if ((list === 0 && !dataList.left[row]) || (list === 1 && !dataList.right[row])) {

                continue;
            }
            var packDiv = document.createElement("div");
            packDiv.setAttribute("class", "connectList");

            packDiv.state = STATE_INITAL;
            packDiv.index = row;
            // 用于删除连接线
            packDiv.lineId = null;
            // 用于控制数组
            packDiv.lineNum = null;
            //自动填充内容,轮廓狂傲是为固定

            packDiv.style.width = packDivWidth + 'px';
            packDiv.style.height = packDivHeight + 'px';

            packDiv.style.top = row * (packDivHeight + packDivGapBottom) + 'px';


            // 计算偏移量,并储存
            // 绘制线段时需要
            this.connectDiv.appendChild(packDiv);

            /**
             *
             * 显示真正数据
             * 先显示左侧数据,再显示右侧数据
             *
             */
            if (list === 0) {

                addContent(packDiv, dataList.left[row].c);
            } else {

                addContent(packDiv, dataList.right[row].c);
            }

            /**
             *
             * 需要左右两侧拆分数据的属性
             * 设置css浮动左浮动和有浮动,用来区分两侧列表的位置
             * list 存储各列表每个可连接DOM的偏移量
             * position 每个选项DOM 连线的连接点坐标
             *
             */
            if (list === 0) {

                // 左侧列表距离浏览器的位置
                packDiv.style.left = "3%";

                // 用户点击时根据此项判断点击的是那侧列表
                // 点击左侧需要判断同侧的其他选中状态,连接状态进行对应处理
                packDiv.list = "left";

                // 线的起始坐标,存入DOM中
                // 后期用户划线时直接取出
                packDiv.position = {
                    X: packDiv.offsetLeft + packDivWidth + 6,
                    Y: packDiv.offsetTop + packDivHeight / 2
                }
            } else {

                // 左侧列表距离浏览器的位置
                packDiv.style.right = "3%";
                // 点击右侧需要判断另外一侧的选中状态,连接状态进行对应处理
                packDiv.list = "right";

                // 线的结束坐标,存入DOM中
                // 后期用户划线时直接取出
                packDiv.position = {
                    X: packDiv.offsetLeft - 3,
                    Y: packDiv.offsetTop + packDivHeight / 2
                }
            }


            if (!this.type) {

                packDiv.ontouchend = function () {

                    var otherAc;

                    if (this.state === STATE_INITAL) {

                        // 如果点击的是左侧列表切换状态,并加遮罩
                        if (this.list === "left") {

                            var similarOtherAc = document.getElementsByClassName("ac")[0];

                            if (similarOtherAc) {

                                similarOtherAc.classList.remove("ac");

                            }
                            this.classList.add("ac");

                            //如果点击的是右侧
                        } else {

                            otherAc = document.getElementsByClassName("ac")[0];
                            if (otherAc) {

                                otherAc.classList.remove('ac');

                                if (otherAc.lineId !== null) {
                                    me._rmUserAnswer(otherAc.lineId);
                                }

                                // 记录用户连接答案
                                me.userAnswerArr.push({
                                    "id": otherAc.index,
                                    "correct": dataList.left[otherAc.index]["aw"] == this.index ? 1 : 0,
                                    "result": this.index
                                });

                                // 绘制连线
                                me._draw(questionArr[0][otherAc.index], questionArr[1][this.index]);
                            }

                        }

                    } else {

                        // 当前状态为连线状态 即 state === STATE_CONNECTION
                        if (this.list === "left") {

                            otherAc = document.getElementsByClassName("ac")[0];
                            if (otherAc) {
                                otherAc.classList.remove("ac");
                            }
                            this.classList.add("ac");

                        } else {

                            otherAc = document.getElementsByClassName("ac")[0];

                            // 如果左侧不是没有任何选中的状态
                            if (otherAc) {

                                otherAc.classList.remove('ac');

                                if (document.getElementById('line' + otherAc.index + '_' + this.index) != null) {
                                    return;
                                }

                                // 左侧之前如果没有连接过其他线并且没有重复点击一个线
                                // 如果另一侧有连接,删除两条线
                                if (otherAc.lineId !== null && otherAc.lineId !== this.lineId) {

                                    me._rmUserAnswer(otherAc.lineId);
                                }

                                me._rmUserAnswer(this.lineId);

                                // 用户答案记录
                                me.userAnswerArr.push({
                                    "id": otherAc.index,
                                    "correct": dataList.left[otherAc.index]["aw"] == this.index ? 1 : 0,
                                    "result": this.index
                                });


                                me._draw(questionArr[0][otherAc.index], questionArr[1][this.index]);

                            }

                        }
                    }
                };
                //支持鼠标点击事件
                packDiv.onclick= packDiv.ontouchend;
            }
            //储存到列数组中
            questionList.push(packDiv);


        }

        //列数组储存到问题的最终数组里,方面以后操作节点
        questionArr.push(questionList);

    }

    this._anewDraw();

    // 如果需要批卷
    if (this.type) {
        this._judgeAnswer();
    }
    return this;
};

/**
 * 查找对应连线,对应数组中删除
 * @param lineId 线的ID
 * @private
 */
ConnectDiv.prototype._rmUserAnswer = function (lineId) {

    var id = lineId[0];

    var result = lineId[1];

    for (var i = 0, len = this.userAnswerArr.length; i < len; i++) {

        if (this.userAnswerArr[i].id == id && this.userAnswerArr[i].result == result) {

            // lineId 清空
            questionArr[0][id].lineId = null;
            questionArr[1][result].lineId = null;

            // 初始化连线状态
            questionArr[0][id].state = STATE_INITAL;
            questionArr[1][result].state = STATE_INITAL;

            // 删除选中边框
            questionArr[0][id].classList.remove("acBorder");
            questionArr[1][result].classList.remove("acBorder");

            // 从用户答案中删除该答案
            this.userAnswerArr.splice(i, 1);
            // 删除连线
            removeElement(document.getElementById('line' + id + '_' + result));
            return;
        }
    }
};

/**
 * 历史作答重新绘制
 * 重绘全部连线  主要用于绘制历史记录
 * @private
 */
ConnectDiv.prototype._anewDraw = function () {

    var record = this.userAnswerArr;

    // 重新绘制全部线
    for (var drawIndex = 0, drawLen = record.length; drawIndex < drawLen; drawIndex++) {

        this._draw(questionArr[0][record[drawIndex].id], questionArr[1][record[drawIndex].result]);
    }
};

/**
 * 绘制线条
 * 利用数学公式计算出斜边长(连线的线长)
 * 计算需要旋转的角度后旋转
 *
 * 左右两侧列表添加连线ID 更改state为连线状态
 * @param startDOM 左侧连接节点
 * @param endDOM 右侧连接节点
 * @private
 */
ConnectDiv.prototype._draw = function (startDOM, endDOM) {

    if (!this.type) {
        startDOM.classList.add("acBorder");
        endDOM.classList.add("acBorder");
    }

    var lineId = [startDOM.index, endDOM.index];
    startDOM.lineId = endDOM.lineId = lineId;
    // 设置所有连线状态
    startDOM.state = endDOM.state = STATE_CONNECTION;

    // 设置连线题左右列表的Id 后期批改 根据此项判断对错

    startDOM.id = "div" + lineId[0] + "_" + lineId[1];

    endDOM.id = "div" + lineId[0] + "right" + lineId[1];

    // 获取连线开始的坐标
    var lineStart = startDOM.position;

    // 获取连线结束的坐标
    var lineEnd = endDOM.position;

    var line = document.createElement("div");

    line.setAttribute("class", "line");

    line.id = "line" + startDOM.index.toString() + "_" + endDOM.index.toString();

    // 计算三角形旋转角度 与 线的长度
    var triangleLineA = lineEnd.X - lineStart.X;
    var triangleLineB = lineEnd.Y - lineStart.Y;
    var angle = Math.atan2(triangleLineB, triangleLineA) * 180 / Math.PI;
    line.style.width = Math.sqrt(Math.pow(Math.abs(triangleLineA), 2) + Math.pow(Math.abs(triangleLineB), 2)) + 'px';
    line.style.top = lineStart.Y + 'px';
    line.style.left = lineStart.X + 'px';

    // 旋转基准点,低版本考虑兼容
    line.style.webkitTransformOrigin = "0 50%";
    line.style.mozTransformOrigin = "0 50%";
    line.style.msTransformOrigin = "0 50%";
    line.style.oTransformOrigin = "0 50%";
    line.style.transformOrigin = "0 50%";

    // 旋转角度基准点,低版本考虑兼容
    line.style.webkitTransform = "rotate(" + angle + "deg)";
    line.style.mozTransform = "rotate(" + angle + "deg)";
    line.style.msTransform = "rotate(" + angle + "deg)";
    line.style.oTransform = "rotate(" + angle + "deg)";
    line.style.transform = "rotate(" + angle + "deg)";
    this.connectDiv.appendChild(line);
};
/**
 * 返回答案数组
 * 与APP交互,返回用户连线答案
 * @returns {Array}
 */
ConnectDiv.prototype.getUserAnswer = function () {
    return this.userAnswerArr;
};

/**
 * 批改作业
 * @private
 */
ConnectDiv.prototype._judgeAnswer = function () {

    for (var i = 0, len = this.userAnswerArr.length; i < len; i++) {

        if (this.userAnswerArr[i].correct == 1) {

            // 用户答题正确
            document.getElementById("div" + this.userAnswerArr[i].id + "_" + this.userAnswerArr[i].result).classList.add("answerRight");
            //
            document.getElementById("div" + this.userAnswerArr[i].id + "right" + this.userAnswerArr[i].result).classList.add("answerRight");
            document.getElementById("line" + this.userAnswerArr[i].id + "_" + this.userAnswerArr[i].result).classList.add("answerRight");
        } else {

            // 用户答案错误
            // 左侧列表红色边框
            document.getElementById("div" + this.userAnswerArr[i].id + "_" + this.userAnswerArr[i].result).classList.add("answerError");
            // // 右侧列表红色边框
            document.getElementById("div" + this.userAnswerArr[i].id + "right" + this.userAnswerArr[i].result).classList.add("answerError");
            // // 连线红色
            document.getElementById("line" + this.userAnswerArr[i].id + "_" + this.userAnswerArr[i].result).classList.add("answerError");
        }
    }
};

module.exports = new ConnectDiv();

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function Asset() {

}

Asset.prototype.config = {
    bg0: new Image(),
    home: new Image(),
    home1: new Image(),
    bgm1: new Audio(),
    bgm2: new Audio(),
    ready: new Audio(),
}

//加载资源
Asset.prototype.load = function (asset, callback) {
    var self = this;
    var assetNumbers = Object.getOwnPropertyNames(asset).length;
    var loadNumbers = 1;
    for (var key in asset) {
        var obj = self.config[key];
        obj.src = asset[key];
        if (obj.tagName.toLowerCase() == 'img') {
            obj.onload = function () {
                loadNumbers++;
                callback(parseInt((loadNumbers / assetNumbers) * 100));
            }
        }
        else if (obj.tagName.toLowerCase() == 'audio') {
            obj.onloadedmetadata = function () {
                loadNumbers++;
                callback(parseInt((loadNumbers / assetNumbers) * 100));
            }
        }
    }
}

module.exports = new Asset();

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by ZhaoBoWen on 2016/11/14.
 */


// 添加内容
function addContent(ele, content) {

  var contentDOM = document.createElement("div");
  contentDOM.classList.add("connectContentBox");

  contentDOM.innerHTML = content;
  var imgDOM = contentDOM.getElementsByTagName("img")[0];

  if (imgDOM) {
    // 如果是图片,处理显示

    contentDOM.appendChild(imgDOM);
    // var img = new Image();

    // 图片是否加载成功如果加载成功则换算宽高
    // 并居中
    imgDOM.onload = function () {

      // 默认加载失败背景图 css默认写入 加载成功后删除
      contentDOM.style.backgroundImage = "url('')";

      var imgDOMHeight = parseInt(window.getComputedStyle(imgDOM, null).height);
      var imgDOMWidth = parseInt(window.getComputedStyle(imgDOM, null).width);

      var eleScale = parseInt(ele.style.width) / parseInt(ele.style.height);
      var imgScale = imgDOMWidth / imgDOMHeight;

      eleScale < imgScale ? (function () {

        imgDOM.style.height = "auto";
        imgDOM.style.width = ele.style.width;
        imgDOM.style.position = "absolute";
        imgDOM.style.left = 0;
        imgDOM.style.top = (parseInt(ele.style.height) - parseInt(window.getComputedStyle(imgDOM, null).height)) / 2 + 'px';

      }()) : (function () {

        imgDOM.style.height = ele.style.height;
        imgDOM.style.width = "auto";
        imgDOM.style.position = "absolute";
        imgDOM.style.top = 0;
        imgDOM.style.left = (parseInt(ele.style.width) - parseInt(window.getComputedStyle(imgDOM, null).width)) / 2 + 'px';

      }());

      imgDOM = null;

    };
    // 如果加载失败 那么清空内容全为背景色
    imgDOM.onerror = function () {

      contentDOM.innerHTML = '';

    };

    // 发起了一个http(s)的请求
    // img.src = imgDOM.getAttribute("src");
    // 图片加载完成后填入节点
    ele.appendChild(contentDOM);

  } else {
    // 没有图片,纯文本

    // 防止编辑出现多标签现象
    // 加外框后计算上下左右居中
    var textOutline = document.createElement("div");
    textOutline.style.position = "absolute";
    textOutline.innerHTML = content;
    textOutline.style.maxWidth = '90%';
    textOutline.style.maxHeight = '90%';
    // 图片加载完成后填入节点
    ele.appendChild(textOutline);

    // 等待浏览器渲染后,文字居中现实
    var textOutlineWidth = parseInt(window.getComputedStyle(textOutline, null).width);
    var eleWidth = parseInt(ele.style.width);

    if (eleWidth > textOutlineWidth) {

      textOutline.style.left = (eleWidth - textOutlineWidth) / 2 + 'px';
    }

    var textOutlineHeight = parseInt(window.getComputedStyle(textOutline, null).height);
    var eleHeight = parseInt(ele.style.height);

    if (eleHeight > textOutlineHeight) {

      textOutline.style.top = (eleHeight - textOutlineHeight) / 2 + 'px';
    }

  }

}

module.exports = addContent;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by ZhaoBoWen on 2016/11/18.
 */



function removeElement(_element){
    var _parentElement = _element.parentNode;
    if(_parentElement){
        _parentElement.removeChild(_element);
    }
}

module.exports = removeElement;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by ZhaoBoWen on 2016/11/19.
 */



const connect = __webpack_require__(2);
const loadAsset = __webpack_require__(3);
const ajax = __webpack_require__(1);
const util = __webpack_require__(0);

//玩家信息
var begintiem, endtime, host_url;
var userInfo = {
    openid: '',
    nickName: '',
    playTime: 0,
    score: 0
}


var submitAnswer = function (content) {
    var maskEl = document.getElementsByClassName('mask')[0];
    var submitEl = document.getElementsByClassName('submit')[0];
    var scorePanelEl = document.getElementsByClassName('scorePanel')[0];
    var outGameEl = document.getElementsByClassName('outGame')[0];
    var retryEl = document.getElementsByClassName('retry')[0];
    var scoreEl = document.getElementsByClassName('score')[0];
    var sortEl = document.getElementsByClassName('sort')[0];
    var sortPanelEl = document.getElementsByClassName('sortPanel')[0];
    var contentEl = document.getElementsByClassName('content')[0];
    var closeEl = document.getElementsByClassName('close')[0];

    var submitInteval = setInterval(function () {
        var reslut = connect.getUserAnswer();
        if (reslut) {
            submitEl.classList.remove('hide');
            //判断是否已经配对完成
            if (content["left"].length == reslut.length) {
                submitEl.classList.add('submit-enable');
                submitEl.onclick = function (e) {
                    submitEl.classList.add('hide');
                    submitEl.classList.remove('submit-enable');

                    maskEl.classList.remove('hide');
                    scorePanelEl.classList.remove('hide');

                    var error_reslut = reslut.filter(function (item) { return item["correct"] == 0 });
                    var right_reslut = reslut.filter(function (item) { return item["correct"] == 1 });

                    //正确率
                    userInfo.score = right_reslut.length / reslut.length;
                    //耗时
                    endtime = new Date().getTime();
                    userInfo.playTime = ((endtime - begintiem) / 1000).toFixed(2);

                    //提交玩家游戏数据
                    if (userInfo.openid.length > 0) {
                        ajax({
                            url: host_url + 'uploadUser',    // 请求地址  
                            jsonp: 'jsonpCallback',  // 采用jsonp请求，且回调函数名为"jsonpCallbak"，可以设置为合法的字符串  
                            data: userInfo,
                            time: 2000,
                            success: function (res) {   // 请求成功的回调函数  
                                endtime = null;
                                scoreEl.innerHTML = "正确" + right_reslut.length + "对，错误" + error_reslut.length + "对";
                            },
                            error: function (error) {  // 请求失败的回调函数  
                                scoreEl.innerHTML = "正确" + right_reslut.length + "对，错误" + error_reslut.length + "对";
                            }
                        });
                    }
                    else {
                        scoreEl.innerHTML = "正确" + right_reslut.length + "对，错误" + error_reslut.length + "对";
                    }
                }
                clearInterval(submitInteval);
            }
        }
    }, 200);

    outGameEl.onclick = function (e) {
        maskEl.classList.add('hide');
        scorePanelEl.classList.add('hide');
        var reslut = connect.getUserAnswer();
        if (reslut) {
            connect.init(reslut, content, true);
        }

        retryEl.classList.remove('hide');
        if (userInfo.openid.length > 0) {
            //点击排行榜按钮
            sortEl.classList.remove('hide');
            sortEl.onclick = function () {
                //获取玩家排行信息
                ajax({
                    url: host_url + 'sortUser',    // 请求地址  
                    jsonp: 'jsonpCallback',  // 采用jsonp请求，且回调函数名为"jsonpCallbak"，可以设置为合法的字符串  
                    time: 2000,
                    success: function (res) {   // 请求成功的回调函数  

                        var content = "";
                        if (res.length > 0) {
                            for (var i = 0; i < res.length; i++) {
                                var item = res[i];
                                content = content + "<tr><td>" + (i + 1) + "</td><td><img src='" + item.headimgurl + "'/></td><td>" + item.nickName + "</td><td>" + parseFloat(item.score) * 100 + "%</td><td>" + parseFloat(item.playTime).toFixed(2) + "s</td></tr>"
                            }
                        }
                        contentEl.innerHTML = "<table>" + content + "</table>";
                        sortPanelEl.classList.remove('hide');
                    },
                    error: function (error) {  // 请求失败的回调函数  
                        sortPanelEl.classList.remove('hide');
                    }
                });
                closeEl.onclick = function () {
                    sortPanelEl.classList.add('hide');
                }
            }
        }
        else {
            retryEl.style.left = '2rem';
        }
        retryEl.onclick = function (e) {
            sortEl.classList.add('hide');
            retryEl.classList.add('hide');
            retryEl.style.left = '';
            submitEl.classList.remove('hide');
            submitEl.onclick = function (e) { return false }
            content = util.initContent(count);
            begintiem = new Date().getTime();
            connect.init([], content, false);
            submitAnswer(content);
        }
    }
}

//初始化游戏
window.initGame = function (count, hosturl) {
    host_url = hosturl;
    var loadingEl = document.getElementsByClassName('loading')[0];
    var homeEl = document.getElementsByClassName('home-page')[0];
    var gameBgEl = document.getElementsByClassName('gameBg')[0];
    var maskEl = document.getElementsByClassName('mask')[0];
    var startEl = document.getElementsByClassName('start')[0];
    var logoEl = document.getElementsByClassName('logo')[0];

    var content = util.initContent(count);
    var asset = {
        bg0: 'image/bg0.jpg',
        home: 'image/home.jpg',
        home1: 'image/home1.jpg',
        bgm1: 'music/bgm1.mp3',
        bgm2: 'music/bgm2.mp3',
        ready: 'music/ready.mp3'
    };
    //获取url中的参数（"?"符后的字串）
    var openid = util.getRequest().openid;


    //加载资源
    loadAsset.load(asset, function (percent) {
        if (percent == 100) { //图片、音乐加载完后
            setTimeout(function () {
                loadingEl.classList.add('hide');
                homeEl.classList.remove('hide');

                loadAsset.config.bgm1.play();
                loadAsset.config.bgm1.loop = true;

                // 获取玩家微信信息
                ajax({
                    url: host_url + 'userInfo',    // 请求地址  
                    jsonp: 'jsonpCallback',  // 采用jsonp请求，且回调函数名为"jsonpCallbak"，可以设置为合法的字符串  
                    data: { 'openid': openid },   // 传输数据  
                    time: 2000,
                    success: function (res) {   // 请求成功的回调函数  
                        logoEl.classList.add('wx');
                        logoEl.style["background-image"] = 'url("' + res.headimgurl + '")';
                        logoEl.querySelector('span').innerHTML = res.nickName
                        userInfo.openid = openid;
                        userInfo.nickName = res.nickName
                    },
                    error: function (error) {  // 请求失败的回调函数  
                        logoEl.classList.add('unkown');
                        logoEl.querySelector('span').innerHTML = util.generateMixed(10);
                    }
                });

                //首页监听事件，点击进入模式选择
                homeEl.onclick = function (e) {
                    homeEl.classList.add('hide');
                    gameBgEl.classList.remove('hide');
                    maskEl.classList.remove('hide');

                    loadAsset.config.bgm1.pause();
                    loadAsset.config.bgm1.loop = false;

                    loadAsset.config.bgm2.play();
                    loadAsset.config.bgm2.loop = true;

                    setTimeout(function () {
                        loadAsset.config.ready.play();
                        startEl.classList.add('start-left');
                    }, 500);
                    setTimeout(function () {
                        maskEl.classList.add('hide');
                        startEl.classList.add('start-right');
                        loadAsset.config.ready.pause();
                        setTimeout(function () {
                            startEl.classList.add('hide');
                            begintiem = new Date().getTime();
                            connect.init([], content, false);
                            submitAnswer(content);
                        }, 1000);
                    }, 2000);
                };
            }, 2000);
        }
    });
}




/***/ })
/******/ ]);
});